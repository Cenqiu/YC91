队列是一种数据结构．它有两个基本操作：在队列尾部加人一个元素，和从队列头部移除一个元素就是说，
队列以一种先进先出的方式管理数据
 
offer       添加一个元素并返回true, 如果队列已满，则返回false
poll        移除并返问队列头部的元素, 如果队列为空，则返回null
size		返回队列的长度

OOP
封装: 安全问题
继承: 代码复用
多态: 代码扩展

继承语法:

class 子类 extends 父类 {
	// 子类将会继承父类所有的非私有和非默认的属性和方法
}

子类可以继承父类属性和方法, 但同时也能扩展新的属性和方法,  覆盖父类原有的属性和方法

4个访问作用域

public		: 共有的, 访问不受任何限制
protected	:受保护的 ,   同包 + 父子
默认( 不写 )		:默认的,  同包
private		:私有,  只能当前类访问

public class 类名 {
	public int a;
	protected void test(){}

} 


==========================================
=                                   以下是抄写内容                                                          =
==========================================

继承中的构造方法

父类中的构造方法不能被子类继承，即便它是public的
父类的构造方法负责初始化属于它的成员变量，而子类的构造方法则只需考虑初始化属于自己的成员变量，不必去关注父类的情况。
当实例化子类的对象时，必须先执行父类的构造方法，然后再执行子类的构造方法
如果父类的构造方法执行失败，那么子类的对象也将无法实例化

继承中构造函数的默认规则( 潜规则 )
1. 如果类没有定义构造函数, 那么虚拟机会自动提供一个无参数的构造函数
2. 如果类有定义构造函数, 那么虚拟机不会自动提供一个无参数的构造函数
		虚拟机默认提供无参数的构造函数就失效了
3. 子类的构造方法会默认的执行父类的无参数的构造方法


super 指代父类对象, 作用类似于 this( 当前对象 )

super关键字有两个主要用途；
第一种用途是：在子类的构造方法中，super关键字可以显式地调用父类的构造方法，用于将参数传递给它；
	其一般语法是：
		 super(实际参数);
	需要注意的是：该语句必须是子类构造方法的第一条语句。

如果父类和子类中有同名成员，在子类中默认访问是属于自己的那一个成员；
super关键字可以明确地指定要访问父类中的成员；
其一般语法是：
	super.成员名;
前提条件是：父类中的该成员不是private的。








