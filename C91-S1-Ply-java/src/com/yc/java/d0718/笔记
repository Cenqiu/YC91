多态==> 灵活扩展

多态分类:
	1. 静态多态 ==> 方法重载
	2. 动态多态 ==> 1.继承, 2.重写( 方法 属性), 3.引用转型( 父类指向子类对象 ) 
	
方法多态性和属性多态性

方法 : 看 = 右边 ( new 谁调谁)
	A a = new B();
	a.a(); ==> B的a方法
	
属性: 看 = 左边,  声明谁获取谁
	A a = new B();
	a.b;   ==> A的b属性
	
	
	
==============================
在某些情况下，基类无法（或者没有必要）提供被覆盖方法的具体实现，那么就可以将此方法声明成抽象方法；
使用关键字abstract声明抽象方法，一般语法：
	[访问权限] abstract 返回值类型 方法名称(参数列表);
如：
	public abstract void draw();
	
如果某个类中包含有抽象方法，那么该类就必须定义成抽象类；
定义抽象类同样使用关键字abstract，一般语法：
	[访问权限] abstract class 类名 {
		成员列表
	}
如：
	public abstract class Shapes {
		public abstract void draw();
	}

抽象类
抽象类不可以直接实例化，只可以用来继承；
抽象类的派生子类应该提供对其所有抽象方法的具体实现；
可以这么认为，抽象方法实际上就是由抽象基类强制要求其派生子类必须实现的方法原型；
如果抽象类的派生子类没有实现其中的所有抽象方法，那么该派生子类仍然是抽象类，只能用于继承，而不能实例化；
抽象类中也可以包含有非抽象的方法；
抽象类中可以没有抽象方法, 抽象类可以不定义抽象方法
构造方法和静态方法不可以修饰为abstract。

抽象类简单理解:  不允许被直接创建的类,  ( 匿名类可以创建)


接口
如果某个类中的所有方法都是抽象方法，那么可以考虑将该类定义为接口；
定义接口使用关键字interface，一般语法：
	[访问权限] interface 接口名 {
		    成员列表
	}
如：
	public interface IMyInterface {
		……
	}













