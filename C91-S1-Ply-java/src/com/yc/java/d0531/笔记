Java标识符定义规则
1.构成: 字母, 数字, _ , $
2.不能以数字开头
3.不能与关键字冲突: new if for ...
4.严格区分大小写

数据类型:
大类: 基本数据类型, 引用数据类型

基本数据类型: 4类8种
1. 整型数: byte(1), short(2), int(4, 默认整型), long(8)
2. 浮点型: float(4), double(8, 默认浮点数)
		浮点数不能精确表示某些数值, 0.1
3. 布尔型: true 和 false  表示 真 和 假
4. 字符型: 表示单个字符(2)  0~65535
		单引号包裹字符  'a', '1', '你', '\uffff'4个16进制数字, '\055'3个8进制数字
		数字编号 ==> 字符  映射  unicode 编码集
		转义符: \  '\'','\\','\"',"\t",'\n'
		字符型可以当成数字来运算
		char a = 'a';
		int b = a + 1;

引用数据类型:
在Java中，除了上述8种原始数据类型的变量以外，其余的全都属于引用数据类型，其中包括：
数组
对象
存储在引用类型变量中的值是该变量表示的值的地址；
可以借用C语言中指针的概念来理解引用数据类型。

引用数据类型最杰出的代表: String
   1，是JDK中定义的一个类，不是基本数据类型
   2，一个String对象可以用来存储多个字符，在程序中直 
        接给出一个String值要用双引号括起来  
         String  myName = “Tony Tang”;
   3，可以使用 + 运算符把多个String数据连接起来，并且
        还可连接其他类型的数据
	例如：
	 int count=7;
	 System.out.println("Counted " + count + " chars." );


栈内存: 小, 快
堆内存: 大, 慢

类型转换

程序中经常会遇到要将数据类型进行转换的情况（如：在一个表达式中存在不同类型的操作数时），Java的数据类型转换比C控制得更为严格；
数据类型转换有两种情况：
1.自动类型转换(隐式转换)
2.强制类型转换(显式转换)

不难看出，在有类型提升的情况下，编译器将自动进行类型转换，否则就要进行强制类型转换；
类型提升应遵循如下规则：
两种类型必须兼容，且目标类型大于源类型，例如：
	byte、char和short类型都可以提升为int型。
对于表达式而言，其最终结果将会与表达式中最高的数据类型相同。

运算符

算术运算符主要用于数学计算，一般使用数值作为操作数
+加       -减          *乘法          /除      % 取余       - 负   ++自加1  -- 自减1

关系运算符可以测试两个操作数之间的关系（但不会改变操作数的值），型true/false:关系表达式的结果为boolean
==   !=  >   >=  <   <=

逻辑运算符与boolean型操作数一起使用：
逻辑运算符优先级
表达中出现多个 逻辑运算符, 那么就有优先级的问题
最高级别是 ! (一元表达式), 其次是 & , 最后是 |



总结:
1. 引用数据类型: 数组 , 对象(Object)==>字符串 String
2. 类型转换  : 自动转换 , 强制转换,  类型必须兼容
3. 运算符: 算术, 比较, 逻辑(短路)

















程序流程
	











